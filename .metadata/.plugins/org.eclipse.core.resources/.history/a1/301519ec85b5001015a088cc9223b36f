package adminServlet;

import DAO.CategoryDAO;
import DAO.CategoryDAOImpl;
import DAO.NewsDAO;
import DAO.NewsDAOImpl;
import Entity.Category;
import Entity.News;
import Entity.User;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import java.io.File;
import java.io.IOException;
import java.sql.Date;
import java.util.List;
import java.util.UUID;

// Đặt cấu hình MultipartConfig chi tiết hơn cho file upload lớn
@WebServlet("/admin/add_edit_news")
@MultipartConfig(
    fileSizeThreshold = 1024 * 1024 * 2, // 2MB
    maxFileSize = 1024 * 1024 * 10,      // 10MB
    maxRequestSize = 1024 * 1024 * 50    // 50MB
)
public class AdminAddEditNewsServlet extends HttpServlet {

    private static final String UPLOAD_DIR = "uploads";
    // Đảm bảo đường dẫn này khớp CHÍNH XÁC với vị trí file JSP của bạn.
    private static final String NEWS_FORM_JSP = "/admin/add_edit_news.jsp";

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        resp.setCharacterEncoding("UTF-8");
        req.setCharacterEncoding("UTF-8");

        CategoryDAO categoryDAO = new CategoryDAOImpl();
        List<Category> categories = categoryDAO.findAll();
        req.setAttribute("categories", categories);

        String id = req.getParameter("id");
        if (id != null && !id.isEmpty()) {
            NewsDAO newsDAO = new NewsDAOImpl();
            News news = newsDAO.getById(id); 
            req.setAttribute("news", news);
        }

        // Forward về trang form
        req.getRequestDispatcher(NEWS_FORM_JSP).forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        req.setCharacterEncoding("UTF-8");
        resp.setCharacterEncoding("UTF-8");

        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");

        if (user == null) {
            resp.sendRedirect(req.getContextPath() + "/login");
            return;
        }

        // 1. LẤY DỮ LIỆU TỪ FORM 
        String id = req.getParameter("id");
        String title = req.getParameter("title");
        String content = req.getParameter("content");
        String categoryId = req.getParameter("categoryId");
        String postedDateStr = req.getParameter("postedDate");
        String positionStr = req.getParameter("position");
        
        String oldImage = req.getParameter("oldImage");
        String authorId = user.getId();
        
        String status = req.getParameter("status"); 
        
        Integer position = null;
        if (positionStr != null && !positionStr.isEmpty()) {
            try {
                position = Integer.valueOf(positionStr);
            } catch (NumberFormatException e) {
                 // Không làm gì nếu không phải số, giữ nguyên position là null
            }
        }
        
        boolean home = false; 

        // 2. XỬ LÝ ID VÀ VIEWS (và chuẩn bị Entity News)
        NewsDAO newsDAO = new NewsDAOImpl();
        News news = new News(); // Khởi tạo Entity để chứa dữ liệu form (kể cả khi thất bại)
        boolean isUpdating = (id != null && !id.isEmpty());
        String successMessage = "";
        
        if (isUpdating) {
            news.setId(id);
            News oldNews = newsDAO.getById(id);
            if (oldNews != null) {
                news.setViewCount(oldNews.getViewCount());
                successMessage = "Cập nhật tin tức thành công!";
            } else {
                news.setViewCount(0); 
            }
        } else {
            news.setId(UUID.randomUUID().toString());
            news.setViewCount(0); 
            successMessage = "Thêm tin tức mới thành công!";
        }

        // 3. XỬ LÝ FILE UPLOAD (Đảm bảo logic này không ném ngoại lệ nếu không cần thiết)
        Part imagePart = req.getPart("image");
        String fileName = oldImage; 
        String uploadPath = getServletContext().getRealPath(File.separator + UPLOAD_DIR);
        File uploadDir = new File(uploadPath);
        
        if (!uploadDir.exists()) uploadDir.mkdirs();

        if (imagePart != null && imagePart.getSize() > 0 && imagePart.getSubmittedFileName() != null && !imagePart.getSubmittedFileName().isEmpty()) {
            fileName = UUID.randomUUID().toString() + "_" + imagePart.getSubmittedFileName();
            // Ghi file vào thư mục UPLOADS
            try {
                imagePart.write(uploadPath + File.separator + fileName);
            } catch (IOException e) {
                 // Nếu upload file thất bại, gán lại lỗi và forward về form
                String errorMessage = "Lưu file ảnh thất bại. Dữ liệu tin tức không được lưu.";
                req.setAttribute("error", errorMessage);
                req.setAttribute("news", news); // Giữ dữ liệu form
                req.setAttribute("categories", new CategoryDAOImpl().findAll()); // Giữ category
                req.getRequestDispatcher(NEWS_FORM_JSP).forward(req, resp);
                return;
            }
        } else if (fileName == null || fileName.isEmpty()) {
            // Trường hợp thêm mới mà không có ảnh, dùng default.jpg
            fileName = "default.jpg"; 
        }

        // 4. GÁN DỮ LIỆU CUỐI CÙNG VÀO ENTITY
        news.setTitle(title);
        news.setContent(content);
        news.setImage(fileName);
        
        // Cần gán lại categoryId, authorId, position, status từ form vào news
        news.setAuthor(authorId);
        news.setCategoryId(categoryId);
        news.setHome(home); 
        news.setPosition(position);
        news.setStatus(status != null ? status : "Chưa duyệt"); 

        try {
            news.setPostedDate(Date.valueOf(postedDateStr));
        } catch (IllegalArgumentException | NullPointerException e) {
            // Nếu ngày đăng không hợp lệ, set lỗi và trả về form
            String errorMessage = "Lỗi định dạng ngày đăng. Vui lòng kiểm tra lại.";
            req.setAttribute("error", errorMessage);
            req.setAttribute("news", news); // Giữ dữ liệu form
            req.setAttribute("categories", new CategoryDAOImpl().findAll()); // Giữ category
            req.getRequestDispatcher(NEWS_FORM_JSP).forward(req, resp);
            return;
        }

        // 5. GỌI DAO VÀ CHUYỂN HƯỚNG
        
        // FIX LỖI BIÊN DỊCH: Sử dụng toán tử điều kiện để gọi insert() hoặc update()
        boolean result = isUpdating ? newsDAO.update(news) : newsDAO.insert(news);

        if (result) {
            // LOGIC THÀNH CÔNG: Dùng Redirect (chuyển trang mới)
            
            // Xóa ảnh cũ nếu có ảnh mới và đã cập nhật thành công
            if (isUpdating && oldImage != null && !oldImage.isEmpty() && !oldImage.equals(fileName) && !oldImage.equals("default.jpg")) {
                File oldFile = new File(uploadPath + File.separator + oldImage);
                if (oldFile.exists()) {
                    oldFile.delete();
                }
            }

            // Giả định Entity.User có phương thức isRole() trả về true/false
            String redirectURL = user.isRole() 
                ? req.getContextPath() + "/admin/manage_all_news"
                : req.getContextPath() + "/reporter/manage_my_news";
                
            // Set message vào session để trang đích có thể hiển thị
            session.setAttribute("message", successMessage);
            resp.sendRedirect(redirectURL);
            
        } else {
            // LOGIC THẤT BẠI: Dùng FORWARD (giữ nguyên request và attribute)
            String errorMessage = "Lưu tin thất bại! Dữ liệu không hợp lệ hoặc lỗi Database.";
            
            // 1. Lấy lại Categories để JSP hiển thị menu dropdown
            CategoryDAO categoryDAO = new CategoryDAOImpl();
            req.setAttribute("categories", categoryDAO.findAll()); 
            
            // 2. Gán lại đối tượng news (đã chứa dữ liệu form cũ)
            req.setAttribute("news", news);
            
            // 3. Gán thông báo lỗi (dùng attribute "error")
            req.setAttribute("error", errorMessage);
            
            // 4. Forward về đúng trang form
            req.getRequestDispatcher(NEWS_FORM_JSP).forward(req, resp);
        }
    }
}
package adminServlet;

import DAO.CategoryDAO;
import DAO.CategoryDAOImpl;
import DAO.NewsDAO;
import DAO.NewsDAOImpl;
import Entity.Category;
import Entity.News;
import Entity.User;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Date;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors; // Thêm import này

// Đặt cấu hình MultipartConfig chi tiết hơn cho file upload lớn
@WebServlet("/admin/add_edit_news")
@MultipartConfig(
    fileSizeThreshold = 1024 * 1024 * 2, // 2MB
    maxFileSize = 1024 * 1024 * 10,      // 10MB
    maxRequestSize = 1024 * 1024 * 50    // 50MB
)
public class AdminAddEditNewsServlet extends HttpServlet {

    private static final String UPLOAD_DIR = "uploads";

    // ==========================================================
    // Hàm tiện ích để đọc giá trị văn bản từ một Part (cho form multipart)
    // ==========================================================
    private String getValueFromPart(HttpServletRequest req, String name)
            throws IOException, ServletException {
        
        Part part = req.getPart(name);
        if (part == null) {
            return null;
        }

        // Đọc stream với mã hóa UTF-8 để đảm bảo tiếng Việt không bị lỗi
        try (BufferedReader reader = new BufferedReader(
             new InputStreamReader(part.getInputStream(), "UTF-8"))) {
            
            // Đọc tất cả các dòng và ghép lại thành một chuỗi duy nhất
            return reader.lines().collect(Collectors.joining(System.lineSeparator()));
        }
    }

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        // Cấu hình encoding cho response (quan trọng cho tiếng Việt)
        resp.setCharacterEncoding("UTF-8");
        req.setCharacterEncoding("UTF-8");

        CategoryDAO categoryDAO = new CategoryDAOImpl();
        List<Category> categories = categoryDAO.findAll();
        req.setAttribute("categories", categories);

        String id = req.getParameter("id");
        if (id != null && !id.isEmpty()) {
            NewsDAO newsDAO = new NewsDAOImpl();
            // Sử dụng getById để lấy cả CategoryName và AuthorName nếu cần hiển thị
            News news = newsDAO.getById(id); 
            req.setAttribute("news", news);
        }

        // Giả định JSP nằm ở đây:
        req.getRequestDispatcher("/admin/edit_news.jsp").forward(req, resp);
    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp)
            throws ServletException, IOException {

        req.setCharacterEncoding("UTF-8");
        resp.setCharacterEncoding("UTF-8");

        HttpSession session = req.getSession();
        User user = (User) session.getAttribute("user");

        // Kiểm tra phiên đăng nhập
        if (user == null) {
            resp.sendRedirect(req.getContextPath() + "/login");
            return;
        }

        // 1. LẤY DỮ LIỆU TỪ FORM - SỬ DỤNG getValueFromPart() cho tất cả các trường text
        // LƯU Ý: req.getPart() chỉ hoạt động sau khi @MultipartConfig được sử dụng
        String id = getValueFromPart(req, "id");
        String title = getValueFromPart(req, "title");
        String content = getValueFromPart(req, "content");
        String categoryId = getValueFromPart(req, "categoryId");
        String postedDateStr = getValueFromPart(req, "postedDate");
        String positionStr = getValueFromPart(req, "position");
        
        String oldImage = getValueFromPart(req, "oldImage"); // Ảnh cũ (cho chế độ sửa)
        String authorId = user.getId();
        
        String status = getValueFromPart(req, "status"); // Kiểm tra lại: trường status này không có trong JSP?
        
        Integer position = (positionStr != null && !positionStr.isEmpty()) ? Integer.valueOf(positionStr) : null;
        boolean home = false; 

        // 2. XỬ LÝ ID VÀ VIEWS
        NewsDAO newsDAO = new NewsDAOImpl();
        News news = new News();
        boolean isUpdating = (id != null && !id.isEmpty());
        String successMessage = "";
        
        if (isUpdating) {
            // Chế độ SỬA
            news.setId(id);
            News oldNews = newsDAO.getById(id);
            if (oldNews != null) {
                // Giữ lại viewCount
                news.setViewCount(oldNews.getViewCount());
                successMessage = "Cập nhật tin tức thành công!";
            } else {
                news.setViewCount(0); 
            }
        } else {
            // Chế độ THÊM MỚI
            news.setId(UUID.randomUUID().toString());
            news.setViewCount(0); 
            successMessage = "Thêm tin tức mới thành công!";
        }

        // 3. XỬ LÝ FILE UPLOAD
        Part imagePart = req.getPart("image");
        String fileName = oldImage; // Bắt đầu bằng tên ảnh cũ
        String uploadPath = getServletContext().getRealPath(File.separator + UPLOAD_DIR);
        File uploadDir = new File(uploadPath);
        
        if (!uploadDir.exists()) uploadDir.mkdirs();

        // Kiểm tra xem người dùng có upload file MỚI không
        if (imagePart != null && imagePart.getSize() > 0 && imagePart.getSubmittedFileName() != null && !imagePart.getSubmittedFileName().isEmpty()) {
            
            // Xóa file cũ nếu đang ở chế độ sửa
            if (isUpdating && oldImage != null && !oldImage.isEmpty() && !oldImage.equals("default.jpg")) {
                 File oldFile = new File(uploadPath + File.separator + oldImage);
                 if (oldFile.exists()) {
                     oldFile.delete();
                 }
            }
            
            // Tạo tên file mới và lưu file
            fileName = UUID.randomUUID().toString() + "_" + imagePart.getSubmittedFileName();
            // Ghi file vào thư mục UPLOADS
            imagePart.write(uploadPath + File.separator + fileName);
            
        } else if (fileName == null || fileName.isEmpty()) {
            // Trường hợp thêm mới mà không có ảnh (nếu JSP cho phép)
            // Dựa trên JSP của bạn: trường 'image' là required khi thêm mới.
            fileName = "default.jpg"; 
        }

        // 4. GÁN DỮ LIỆU CUỐI CÙNG VÀO ENTITY
        news.setTitle(title);
        news.setContent(content);
        news.setImage(fileName);
        
        try {
            news.setPostedDate(Date.valueOf(postedDateStr));
        } catch (IllegalArgumentException | NullPointerException e) {
            System.err.println("Lỗi chuyển đổi ngày đăng: " + e.getMessage());
            // Thiết lập ngày hiện tại nếu lỗi
            news.setPostedDate(new Date(System.currentTimeMillis()));
        }
        
        news.setAuthor(authorId);
        news.setCategoryId(categoryId);
        news.setHome(home); 
        news.setPosition(position);
        
        // Gán giá trị mặc định nếu status không tồn tại
        news.setStatus(status != null && !status.isEmpty() ? status : "Chờ duyệt"); 

        // 5. GỌI DAO VÀ CHUYỂN HƯỚNG
        boolean result = isUpdating ? newsDAO.update(news) : newsDAO.insert(news);

        if (result) {
            // Chuyển hướng thành công
            String redirectURL = user.isRole() 
                ? req.getContextPath() + "/admin/manage_all_news?message=" + successMessage
                : req.getContextPath() + "/reporter/manage_my_news?message=" + successMessage;
                
            resp.sendRedirect(redirectURL);
            
        } else {
            // Xử lý thất bại
            String errorMessage = "Lưu tin thất bại! Vui lòng kiểm tra lại cấu hình DAO/Database.";
            
            CategoryDAO categoryDAO = new CategoryDAOImpl();
            req.setAttribute("categories", categoryDAO.findAll()); 
            
            req.setAttribute("news", news);
            req.setAttribute("errorMessage", errorMessage);
            
            // Chuyển hướng lại trang form để người dùng sửa chữa
            req.getRequestDispatcher("/admin/edit_news.jsp").forward(req, resp);
        }
    }
}
